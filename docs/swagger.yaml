definitions:
  product.Product:
    properties:
      category:
        type: string
      description:
        type: string
      id:
        type: integer
      listPrice:
        type: number
      productCode:
        type: string
      productName:
        type: string
      standardCost:
        type: number
    type: object
  product.ProductList:
    properties:
      data:
        items:
          $ref: '#/definitions/product.Product'
        type: array
      totalRecords:
        type: integer
    type: object
  product.ProductTop:
    properties:
      id:
        type: integer
      productName:
        type: string
      venditos:
        type: number
    type: object
  product.ProductTopResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/product.ProductTop'
        type: array
      totalVentas:
        type: number
    type: object
  product.getAddProductRequest:
    properties:
      category:
        type: string
      description:
        type: string
      listPrice:
        type: string
      productCode:
        type: string
      productName:
        type: string
      standardCost:
        type: string
    type: object
  product.getProductsRequest:
    properties:
      limit:
        type: integer
      offset:
        type: integer
    type: object
  product.updateProductRequest:
    properties:
      category:
        type: string
      description:
        type: string
      id:
        type: integer
      listPrice:
        type: number
      productCode:
        type: string
      productName:
        type: string
      standardCost:
        type: number
    type: object
  users.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  users.User:
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
    type: object
  users.Users:
    items:
      $ref: '#/definitions/users.User'
    type: array
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license: {}
  title: Northwind API
  version: "1.0"
paths:
  /oauth/access_token:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: Post access_token
      tags:
      - Auth
  /oauth/access_token/{access_token_id}:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: sting
      summary: Get access_token by Id
      tags:
      - Auth
  /products/:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Product Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: integer
      summary: delete Product
      tags:
      - Product
    post:
      consumes:
      - application/json
      parameters:
      - description: User Data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/product.getAddProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: integer
      summary: insert Product
      tags:
      - Product
    put:
      consumes:
      - application/json
      parameters:
      - description: User Data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/product.updateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: interger
      summary: update Product
      tags:
      - Product
  /products/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Product Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/product.Product'
      summary: Product by id
      tags:
      - Product
  /products/bestSellers:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/product.ProductTopResponse'
      summary: Best Sellers
      tags:
      - Product
  /products/paginated:
    post:
      consumes:
      - application/json
      parameters:
      - description: User Data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/product.getProductsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/product.ProductList'
      summary: List of the  Products
      tags:
      - Product
  /users:
    post:
      consumes:
      - application/json
      parameters:
      - description: User Data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/users.User'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/users.User'
      summary: Create user
      tags:
      - User
    put:
      consumes:
      - application/json
      parameters:
      - description: User Data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/users.User'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/users.User'
      summary: update user
      tags:
      - User
  /users//login:
    post:
      consumes:
      - application/json
      parameters:
      - description: User Data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/users.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/users.User'
      summary: login user
      tags:
      - User
  /users//search:
    get:
      consumes:
      - application/json
      parameters:
      - description: User Data
        in: body
        name: request
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/users.Users'
      summary: search by status
      tags:
      - User
  /users/{user_id}:
    delete:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: delete user
      tags:
      - User
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: integer
      summary: Get user
      tags:
      - User
swagger: "2.0"
